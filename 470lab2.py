# -*- coding: utf-8 -*-
"""470Lab2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1r-GzjA4RpWHeCv3WQ4__34-JjRt7w1Ia
"""

# Commented out IPython magic to ensure Python compatibility.
# %pip install -qq qiskit
import qiskit
from google.colab import drive
drive.mount('/470labs')

# Commented out IPython magic to ensure Python compatibility.
# %cd /470labs/MyDrive/'Colab Notebooks'/
# %load Hgate.py

!python3 Hgate.py

!cat Hgate.py

# EXPERIMENT 1

import numpy as np
from qiskit import QuantumCircuit, transpile
from qiskit.providers.aer import QasmSimulator
from qiskit.visualization import plot_histogram

## for display
from IPython.display import display

# Create a Quantum Circuit
qc = QuantumCircuit(1,1)

# Add a H gate on qubit 0
qc.h(0)

# Map the quantum measurement from qubit 0 to the classical bit 0
qc.measure(0,0)

# Draw the circuit
display(qc.draw())


# Use Aer's qasm_simulator
simulator = QasmSimulator()

# compile the circuit down to low-level QASM instructions
# supported by the backend (not needed for simple circuits)
compiled_circuit = transpile(qc, simulator)

# Execute the circuit on the qasm simulator
job = simulator.run(compiled_circuit, shots=10000)

# Grab results from the job
result = job.result()

# Returns counts
counts = result.get_counts(compiled_circuit)
print("\nTotal counts:",counts)
plot_histogram(counts)

# EXPERIMENT 2
import numpy as np
from qiskit import QuantumCircuit, transpile
from qiskit.providers.aer import QasmSimulator
from qiskit.visualization import plot_histogram

## for display
from IPython.display import display

# Create a Quantum Circuit
qc = QuantumCircuit(1,1)

# Add a H gate on qubit 0
qc.h(0)
qc.h(0)

# Map the quantum measurement from qubit 0 to the classical bit 0
qc.measure(0,0)

# Draw the circuit
display(qc.draw())


# Use Aer's qasm_simulator
simulator = QasmSimulator()

# compile the circuit down to low-level QASM instructions
# supported by the backend (not needed for simple circuits)
compiled_circuit = transpile(qc, simulator)

# Execute the circuit on the qasm simulator
job = simulator.run(compiled_circuit, shots=10000)

# Grab results from the job
result = job.result()

# Returns counts
counts = result.get_counts(compiled_circuit)
print("\nTotal counts:",counts)
plot_histogram(counts)

# EXPERIMENT 3
import numpy as np
from qiskit import QuantumCircuit, transpile
from qiskit.providers.aer import QasmSimulator
from qiskit.visualization import plot_histogram

## for display
from IPython.display import display

# Create a Quantum Circuit
qc = QuantumCircuit(1,1)

qc.x(0)
# Add a H gate on qubit 0
qc.h(0)
qc.h(0)

# Map the quantum measurement from qubit 0 to the classical bit 0
qc.measure(0,0)

# Draw the circuit
display(qc.draw())


# Use Aer's qasm_simulator
simulator = QasmSimulator()

# compile the circuit down to low-level QASM instructions
# supported by the backend (not needed for simple circuits)
compiled_circuit = transpile(qc, simulator)

# Execute the circuit on the qasm simulator
job = simulator.run(compiled_circuit, shots=10000)

# Grab results from the job
result = job.result()

# Returns counts
counts = result.get_counts(compiled_circuit)
print("\nTotal counts:",counts)
plot_histogram(counts)

# EXPERIMENT 4

import numpy as np
from qiskit import QuantumCircuit, transpile
from qiskit.providers.aer import QasmSimulator
from qiskit.visualization import plot_histogram

## for display
from IPython.display import display

# Create a Quantum Circuit
qc = QuantumCircuit(2,2)

# Add a H gate on qubit 0
qc.h(0)
qc.h(1)

# Map the quantum measurement from qubit 0 to the classical bit 0
qc.measure([0,1],[0,1])

# Draw the circuit
display(qc.draw())


# Use Aer's qasm_simulator
simulator = QasmSimulator()

# compile the circuit down to low-level QASM instructions
# supported by the backend (not needed for simple circuits)
compiled_circuit = transpile(qc, simulator)

# Execute the circuit on the qasm simulator
job = simulator.run(compiled_circuit, shots=1000)

# Grab results from the job
result = job.result()

# Returns counts
counts = result.get_counts(compiled_circuit)
print("\nTotal counts:",counts)
plot_histogram(counts)

# EXPERIMENT 5

import numpy as np
from qiskit import QuantumCircuit, transpile
from qiskit.providers.aer import QasmSimulator
from qiskit.visualization import plot_histogram

## for display
from IPython.display import display

# Create a Quantum Circuit
qc = QuantumCircuit(2,2)

# Add a H gate on qubit 0
qc.h(0)
qc.cx(0,1)
#qc.h(1)

# Map the quantum measurement from qubit 0 to the classical bit 0
qc.measure([0,1],[0,1])

# Draw the circuit
display(qc.draw())


# Use Aer's qasm_simulator
simulator = QasmSimulator()

# compile the circuit down to low-level QASM instructions
# supported by the backend (not needed for simple circuits)
compiled_circuit = transpile(qc, simulator)

# Execute the circuit on the qasm simulator
job = simulator.run(compiled_circuit, shots=1000)

# Grab results from the job
result = job.result()

# Returns counts
counts = result.get_counts(compiled_circuit)
print("\nTotal counts:",counts)
plot_histogram(counts)

# EXPERIMENT 6

import numpy as np
from qiskit import QuantumCircuit, transpile
from qiskit.providers.aer import QasmSimulator
from qiskit.visualization import plot_histogram

## for display
from IPython.display import display

# Create a Quantum Circuit
qc = QuantumCircuit(2,2)
qc.x(1)
qc.barrier()

# Add a H gate on qubit 0
qc.h(0)
qc.cx(0,1)

#qc.h(1)

# Map the quantum measurement from qubit 0 to the classical bit 0
qc.measure([0,1],[0,1])

# Draw the circuit
display(qc.draw())


# Use Aer's qasm_simulator
simulator = QasmSimulator()

# compile the circuit down to low-level QASM instructions
# supported by the backend (not needed for simple circuits)
compiled_circuit = transpile(qc, simulator)

# Execute the circuit on the qasm simulator
job = simulator.run(compiled_circuit, shots=1000)

# Grab results from the job
result = job.result()

# Returns counts
counts = result.get_counts(compiled_circuit)
print("\nTotal counts:",counts)
plot_histogram(counts)