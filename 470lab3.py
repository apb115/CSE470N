# -*- coding: utf-8 -*-
"""470Lab3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1AQChxUXrPlnR3ino4uS_g_M0Ifzd0WgB
"""

# Commented out IPython magic to ensure Python compatibility.
# %pip install -qq qiskit
import qiskit
from google.colab import drive
drive.mount('/470labs')
# %cd /470labs/MyDrive/'Colab Notebooks'/

# Commented out IPython magic to ensure Python compatibility.
# %cd /470labs/MyDrive/'Colab Notebooks'/
# %load starterCode.py
# %cat starterCode.py

import numpy as np
from qiskit import QuantumCircuit, transpile
from qiskit.providers.aer import QasmSimulator
from qiskit.visualization import plot_histogram

## for display\
from IPython.display import display

# To create a Quantum Circuit with 1 qubit and 1 classical bit use
# qc = QuantumCircuit(1,1)
# To create a Quantum Circuit with two qubits and 2 classical bits
# use qc = QuantumCircuit(2,2)
qc = QuantumCircuit(3,3)
# qc.x(0)
# qc.x(1)
# qc.x(2)
# qc.barrier()

# qc.h(0)

qc.ccx(0,1,2)

qc.measure(2,2)
# To map the quantum measurement from qubit 0 to the classical bit 0
# use a command like: qc.measure(0,0)

# To map the quantum measurement from qubit 0 and1 to the classical bit 0 and 1
# use a command like: qc.measure([0,1],[0,1])

# Draw the circuit
display(qc.draw())


# Use Aer's qasm_simulator
simulator = QasmSimulator()

# compile the circuit down to low-level QASM instructions
# supported by the backend (not needed for simple circuits)
compiled_circuit = transpile(qc, simulator)

# Execute the circuit on the qasm simulator
job = simulator.run(compiled_circuit, shots=1000)

# Grab results from the job
result = job.result()

# Returns counts
counts = result.get_counts(compiled_circuit)
print("\nTotal counts:", counts)

plot_histogram(counts)